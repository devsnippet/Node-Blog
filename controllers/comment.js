var config 	= require('../config'),    models 	= require('../models'),    auth 	= require("../util/authorized_controller"),    IdGenerator = models.IdGenerator,    Post 	= models.Post,    Comment 	= models.Comment;function classify(arg) {	return Object.prototype.toString.call(arg);}String.prototype.capitalize = function(){     return this.replace(/\w+/g, function(a){        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();    });};module.exports = {		mapping: {		"create"					: {			"url":"/comment/create", 			"method":"put",			"description":"create a new user",			"auth":true		},				"edit"						: {			"url":"/comment/edit", 			"method":"get",			"description":"NEEDS TO BE UPDATED get a single user by id",			"auth":true		},		"update"					: {			"url":"/comment/update", 			"method":"post",			"description":"NEEDS TO BE UPDATED update a given user",			"auth":true		},				"delete"					: {			"url":"/comment/delete", 			"method":"delete",			"description":"delete your own user, attention: cant be undone",			"auth":true		}	},	// PUT /users/create	create: function(req, res) {		auth.handle_authorized_request(req, res, function(req, res, user){			IdGenerator.findOne({modelname : 'Comment'},function(err,doc){				if(doc){				    doc.currentid += 1;				}else{				    doc = new IdGenerator();				    doc.modelname = 'Comment';				}				var comment = new Comment();                    comment.id 		    = doc.currentid;                    comment.content 	= req.body.reply["content"];                    comment._user		= user._id;                    comment.parent_id 	= req.body.reply["parentId"];                    comment.post_id 	= req.body.reply["postId"];                    comment.save(function(err){					if(!err) {						doc.save(function(err){						    if(err) req.flash('error', '更新评论ID失败');						}); 						var post = new Post();						post.collection.update({id:comment.post_id},{ $inc: {"comments_count":1} },function(err){							if(err) req.flash('error', '更新评论计数失败');						});						req.flash('success', '添加评论成功');					}else{                        req.flash('error', '添加评论失败');					}                    res.redirect('/post/view/'+req.body.reply["catId"]+'/'+req.body.reply["postId"]+config.app_ext);				});			});		});	}, 		// GET /users/edit	edit: function(req, res) {		auth.handle_authorized_request(req, res, function(req, res, user){			User.findOne({_id : user._id, mail : user.mail, password : user.password}, function(error, user){				if(!error) {					res.render('user/edit', {                        title   : 'user edit',                        user    : user                    });				} else {					res.send("fail", 500);				}			});		});	}, 		// POST /users/update	update: function(req, res) {		auth.handle_authorized_request(req, res, function(req, res, user){			User.findOne({_id : req.body.user.id,mail : user.mail}, function(error, user){				if(error) {					res.send("problem occured", 404);				} else {					user.prename 	= req.body.user.prename;					user.phone 	    = req.body.user.phone;					user.birthday 	= req.body.user.birthday;					user.sex 	    = req.body.user.sex;					user.province 	= req.body.user.province;					user.city 	    = req.body.user.city;					user.save(function(err){						if(err) {							req.flash('error', '修改用户信息失败');						} else {                            req.flash('success', '修改用户信息成功');						}                        res.redirect('/user'+config.app_ext);					});				}			});		});	}, 		// DELETE /users/:id	delete: function(req, res) {		auth.handle_authorized_request(req, res, function(req, res, user){			User.findOne({_id : user._id, mail : user.mail, password : user.password}, function(error, user){				if(!error) {					console.log("deleting user " + user.get("mail") + " now");				} else {					res.send("fail", 500);				}			});		});	}	}